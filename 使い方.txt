①ディレクトリ構成

...\Steam\steamapps\common\RimWorld
	CustomPortraits
		〇〇.png
	CustomPortraitsEx\
		〇〇\~\1.dds
		template\
			folder_list.txt
			フォルダー作成.py
		Preset\
			〇〇.json
			InteractionFilter.json
		Setting.json
		ファイル集計.py

②必要なもの
１．CustomPortraits\〇〇.png

〇〇には好きな名前(ポーン名など)

２．CustomPortraitsEx\〇〇\~\1.dds
〇〇は（１．）の名前と一致させてください。
~（チルダ)の箇所は深すぎてもwindows上そんなに長いパスは設定できないので軽めに分類できるものでお願いします。

３．1.dds
画像はpngもしくはdds(DTX1)でお願いします。
サイズは最大横320、縦512です。

これは1からインクリメントして、2.dds、3.ddsと作ってください。
1.dds以外必要な人はおそらく、アニメーション用で使われる方です。
一応pngもサポートしています。1.pngとしてください。
ただし、pngでアニメーション用はサポートしてないです。サイズがでかすぎるためRAM、VRAMに優しくないので今後も対応しないと思います。

後、既知のバグと申し送り.txtに書いた通りddsは上下反転したものを使ってください。
アニメーション用のdds画像を作りたい方はgithub、同梱の「Cine2DDSTool」を使ってください。
使い方はCine2DDSTool\readme.txtをご確認ください。

４．template
template.jsonとフォルダを作成するためだけのもので、folder_list.txtにフォルダーの名前を入れて、python実行すれば
勝手に作ってくれるものです。利用用途としては（２．）用のディレクトリ作成用です。

５．Preset
〇〇は（１．）の名前と一致させてください。
jsonの記述は後述します。

６．Setting.json
display_duration→こちらは〇〇.json側に画面表示秒数の定義がない場合こちらを使用されます。
recipient_log_retention.max_entries
initiator_log_retention.max_entries→これはインタラクトが発生したときの記録の容量です。受け手

recipient_log_retention.seconds
initiator_log_retention.seconds→この秒数でキャッシュを削除するためのものです。これはポーンが最初のインタラクトを発生したさせた時刻からのものとなります。
ただし、再度同じInteractionDefのlabel(ここは翻訳済みのラベルです。日本語なら世間話、英語ならChitchat)＋ポーンのフルネームだと時刻が更新されます。

７．ファイル集計.py
デバッグ用でも

③仕様について
動物、メカノイドには対応していません（心情ない？Nullになってしまう。原因がわかれば対応したいですが、今のところは除外）

アニメーションは
jsonのディスプレイ時間の間大体4フレームごとに画像を切り替えます。

ほかのModで心情を追加するものならその心情名を⑤の内容に書けば、それ用の画像が表示されます。
心情テーブルの取り方は以下の通りです。
(ゲーム内タイトル画面)→オプション→開発オプションにチェック→
タイトル画面上部に再生マークみたいなのがあるのでクリック→
出力タブ→(フィルターにThoughtsと入れる)→Thoughts選択→Copy CSV

ほかのModでインタラクトDef/InteractionDef/が増えても、そのインタラクト名を⑤のjsonに書けば、それ用の画像が表示されます。
ご自身のInteractionDef一覧は以下で確認できます。
出力タブ→Def Label→interactionDef→こっちはPlayerLog.txtに出力されます。

これがあなた自身のMod環境にある心情＋インタラクト名です。日本語以外試してないですが、jsonが"UTF8"(間違えないでください)のファイルであれば、
どの言語でもいけるはずです。

CSVの心情はカンマ区切りなので正規表現でタブに変換すれば見やすくなると思います。sakura editorで
Ctrl+R
置換前「,」
置換後「\t」
正規表現のチェックを入れる。あとは、スプレッドシートに張り付けて、
stagesの箇所が心情名です。ただ[0]~となっているので、後述する、Preset jsonのgroupの箇所で正規表現で
ある程度くくったほうがいいです。使えない人はchat gptに聞くか、正規表現を頑張って覚えてください。
ただ、以下サンプルにもありますが、一般的な「.*」しか使わないでも結構くくれたので、これだけでも覚えていただければと思います。

簡単に説明します。
. = 任意一文字とマッチする
* = 直前の要素が 0回以上繰り返し にマッチ
なので.*とすると

「ひどい宿舎」「豪華な宿舎」をマッチさせたい場合は
「.*宿舎」とすれば「連続した任意の文字」＋「宿舎」とマッチするという意味になります。
上記のように書くと「「ひどい宿舎」「豪華な宿舎」をキャッチすればいいんだな」と処理してくれます。

-----------補足-------------
1.moodAndInteractionImpact=rimworldの心情とインタラクト名のコンテナ
2.group=心情名とインタラクト名を正規表現、完全一致で一括りにまとめる
3.priority_weights=これは優先順位で、定義の上から順番にどの画像を表示するかを確率で決めるもの

4.merged_keys=(1.)と(2.)をまとめる。
5.matched_priority_weights=(4.)を(3.)のキーと一致するものだけにする。
6.TexTureコンテナ=(5.)のランダムな1つのキーとTexTureコンテナのキーの正規表現、完全一致するものを抽出し、Texture2Dを後続に渡す。
-----------補足-------------

④使い方（ゲーム中）
このMODはポーンの心情、インタラクト結果によって左下の画像(インスペクター)を表示切替するものです。
普通にReally Custom Portraitsと使い方は一緒で、ポーン選択後に健康タブ→虫眼鏡マーク→好きな画像のpng選択
をします。

後は、当Modがプログラム内でそのpng名から（５．）のPreset\〇〇.jsonと紐づけするので選択後はやることなく、画像が切り替わるかと思われます。

なので〇〇部分は一致するようにお願いします。

⑤使い方（ゲーム外）
1.Gitに配置してあるリリース済みのdll2つをReally Custom PortraitsのAssembliesに上書きしてください。

2.Presetのjsonに以下を記載します(ver1.0)Presetのjson名は管理の観点からpreset_nameキーの値と一致させたほうがいいかもです。

{
  "preset_name": "ABCD",←これが〇〇のか所です。
  "conditions": {
    "fallback_mood": "Idle",←これは後述のpriority_weightsで確率で選ばれなかった場合の画像表示です。何も紐づくref keyがない場合は
    							Really Custom Portraitsが持っている画像で表示します。
    "fallback_mood_on_death": "Dead",←これはポーンが死んだ場合のref keyです。
    "refs": {←ここにテクスチャ設定等書いていきます。ここのキー名とpriority_weightsの確率で選択されたキー名が一致する場合、その画像を表示されます。
      "雨が降ってずぶぬれ": {←ref key これは正規表現を使えます。
      							これはpriority_weightsのキー名と一致するもの、もしくはpriority_weightsのピックアップしたキー名を正規表現でヒットさせることも可能です。
      							例)refs=Key:雨.*ずぶぬれ|Value:~ ==> priority_weights=Key:雨が降ってずぶぬれ|Value:~ →この内容で画像表示
      							これはref keyの側からpriority_weightsのピックアップしたキーと一致判定されます。
        "textures": {←ここは固定でtextures
          "animation_mode": 1,←このrefはアニメーションかどうか 1 = アニメーション画像、 0 = 1つだけ表示のみ
          "display_duration": 6.0,←画像、アニメーション画像の表示時間
          "files": [
            "ABCD/雨が降ってずぶぬれ/1.dds~79.dds"←アニメーション画像は~(チルダ)で範囲を定義してください。
            						ここもできるだけ〇〇に合わせてください。他のも参照できますが、presetは複数json作れるので。
          ]
        }
      },
      "不快感": {
        "textures": {
          "animation_mode": 1,
          "display_duration": 6.0,
          "files": [
            "ABCD/不快感/1.dds~79.dds"
          ]
        }
      },
      "Idle": {
        "textures": {
          "animation_mode": 1,
          "display_duration": 6.0,
          "files": [
            "ABCD/Idle/1.dds~79.dds"
          ]
        }
      },
      "Dead": {
        "textures": {
          "animation_mode": 1,
          "display_duration": 6.0,
          "files": [
            "ABCD/Dead/1.dds~79.dds"
          ]
        }
      }
    },
    "group": {←ここにグループ化を行います。というのも心情、インタラクト名は種類が多すぎるので1対多で管理できるようにしたものです。
      "不快感": [←これは[]内のものをグループした時の名前です。ここにも正規表現は使えます。
        "奴隷売買",←ここには心情名、インタラクト名を記載していきます。正規表現が使用できます。
        ".*摘出した",
        "監禁された",
        ".*人肉を捌いた",
        "死体.*見た",
        "死んでゆく仲間を見た",
        ".*死ぬところを見た",
        ".*を見放した",
        ".*を見殺しにした",
        "絆で結ばれた.*を見捨てた",
        ".*の蘇生に失敗した"
      ],
      "雨が降ってずぶぬれ": [
        "ずぶ濡れ"
      ]
    },
    "priority_weights": {←優先順位と選択率の定義です。上から順に定義したものが先に評価され、weightの項目によって選択されます。
      "不快感": {←基本はgroupのキーに書かれたものと一致するものを記載します。正規表現も使用できます。その際は
      			心情名＋インタラクト名＋groupのキー名の内容でヒットするか見ます。なのでgroup化しなくてもいいものもを記載することができます。
      			例)priority_weights=Key:.*を見た|Value=~とするとポーンの心情に「死んでゆく仲間を見た」「死体を見た」があればそれをピックアップ
      			更にgroupに「死を見た」があればそれをピックアップし、priority_weightsのValueのweightの確率で判定できます。
      			後続のref key(Texture定義があった上のほうのもの)には「.*を見た」で渡されるのでref keyには".*を見た": {～"files": 
      			["ABCD/...を見た/1.dds~79.dds"]とすれば一致してその画像が表示されます。ちなみにファイル名Windows上「.*」ものを名前に含めれないので
      			「...」としています。この「...」で一致不一致を見ているわけではないので基本なんでもよいです。
        "category": 0,←現在未使用
        "weight": 20←確率0~100までとします。マイナスや0だと選ばれないですし、100以降も必ず選択されるので意味ないです。
      },
      "雨が降ってずぶぬれ": {
        "category": 0,
        "weight": 20
      }
    }
  }
}

3.InteractionFilter.jsonを自分の環境に合わせてカスタマイズする。
{
  "preset_name": "InteractionFilter",←これは固定で
  "conditions": {
    "interaction_filter": {←ここにインタラクト名と一致した場合の動作を書いていきます。
    						インタラクト名をgroupの値側まとめてもよいですし、priority_weightで正規表現で一気に一致させてもいいです。
      "世間話": {←ここにインタラクト名を記載します。正規表現でもよいです。ポーンのインタラクト名は「～の勉強」みたいに複数ある場合、一気に正規表現で
      				一致させるのがいいと思われます。
        "is_recipient": 1,←このインタラクトを受けた側を判定で取りたい場合は「1」を設定します。世間話だと、世間話をされた側のことです。
        "matched_recipient_key": "世間話_受け手",←Preset.json側で拾う名前です。Preset.json側で"group"{ "世間話" : ["世間話_受け手"]}・・・①もしくは、
        							"priority_weight":{"世間話_受け手":{～}}or　グループされている①の場合"priority_weight":{"世間話":{～}}とします。
        "is_initiator": 1,←送り手側です。インタラクトを送った側で判定を取りたい場合は「1」を設定します。世間話だと話題を持ちかけてきた側のことです。
        "matched_initiator_key": "世間話_送り手",←受けての送り手側バージョン
        "cache_duration_seconds": 12.0←インタラクトはキャッシュしています。この世間話は指定秒数までキャッシュを保持して、過ぎたら削除します。
        							これは指定秒数間はポーンにその状態を続けてほしいときに有効です。そうでない場合はPreset.jsonの画像表示時間以降であれば大丈夫です。
        							ただし、画像表示時間未満だと、次の画像表示判定前にこのキャッシュがなくなりますので注意してください。
      },
      ".*勉強": {
        "is_recipient": 1,
        "matched_recipient_key": "勉強_受け手",
        "is_initiator": 1,
        "matched_initiator_key": "勉強_送り手",
        "cache_duration_seconds": 12.0
      }
    }
  }
}

4.Setting.jsonについて
{

  "display_duration": 2.0,←ref keyに表示時間を定義していない場合こちらが使われます。
  "recipient_log_retention": {←受け手側のインタラクトをため込む量とデフォルト定義
    "max_entries": 20,←スタックする量の最大
    "seconds": 12.0←スタックしておく時間のデフォルト時間
  },
  "initiator_log_retention": {
    "max_entries": 20,
    "seconds": 12.0
  }
}